#!/usr/bin/env node

/**
 * Glayzzle : PHP on NodeJS
 * @url http://glayzzle.com
 * @author Ioan CHIRIAC
 * @license BSD-3-Clause
 */

var util = require('util');
var fs = require('fs');
var path = require('path');
var PHP = require('../glayzzle/src/php');
function printVersion() {
  util.puts('Glayzzle version ' + PHP.VERSION);
}

function printHelp() {
  util.puts('Usage: test [options] [-f] <file>');
  util.puts('');
  util.puts('  --debug [0-9]+                 Enables debug ouput (with a specific level)');
  util.puts('  -f <file>                      Parse and test the specified file');
  util.puts('  -d <path>                      Parse each file in the specified path')
  util.puts('  -r                             Use recursivity with the specified path')
  util.puts('  -v, --version                  Print version information and exit');
  util.puts('  -h, --help                     Print help and exit');
}


// aborts the execution with the specified error message
function abort(message) {
  util.error(message);
  process.exit(1);
}

/* Arguments */
var options = {
  debug: 0,
  filename: null,
  path: null,
  recursive: false
};
var args = process.argv.slice(2); // Trim 'node' and the script path.

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

// Reading arguments
while (args.length > 0 && isOption(args[0])) {
  switch(args[0]) {
    case '-f':
      nextArg();
      options.filename = args[0];
      break;

    case '--debug':
      nextArg();
      options.debug = args[0];
      break;

    case '-d':
      nextArg();
      options.path = args[0];
      break;

    case '-r':
      options.recusive = true;
      break;

    case '-v':
    case '--version':
      printVersion();
      process.exit(0);
      break;

    case '-h':
    case '--help':
      printHelp();
      process.exit(0);
      break;

    default:
      abort('Unknown option: ' + args[0] + '.');
  }
  nextArg();
}


// Checking last parameters
if ( args.length > 0 ) {
  if ( args.length == 1 && !options.filename ) {
    options.filename = args[0];
  } else {
    abort('Too many arguments.');
  }
}

if ( !options.filename && !options.path ) {
  abort('Expecting a filename or a path.');
}

process.env.DEBUG = options.debug;

// Load tests handlers
var engines = [
  require('./formats/parser')
  ,require('./formats/phpt')
  ,require('./formats/token')
  ,require('./formats/php')
];

// gets the extension of the specified filename
function getExtension(filename) {
    var i = filename.lastIndexOf('.');
    return (i < 0) ? '' : filename.substr(i);
}

// run a test over the specified file
function test(filename) {
  console.log(' + ' + filename);
  try {
    var extension = getExtension(filename);
    for(var i = 0; i<engines.length; i++) {
      if (engines[i].handles(filename, extension)) {
        if (engines[i].explode) {
          return engines[i].run(
            fs.readFileSync(filename).toString().split('\r\n')
            , filename
            , PHP
          );
        } else {
          return engines[i].run(filename, PHP);
        }
      }
    }
    abort('\nUnrecognized extension "'+getExtension(filename)+'" for ' + filename);
  } catch(e) {
    util.error( (e.stack || e) + '\n' );
    return false;
  }
}

// rebuilds the parser
console.log('\nRefresh parser...\n');
require('../glayzzle/src/builder').compile(
  function() {
    console.log('\n*** START TESTING ***\n');
    if (options.filename) {
      if (!test(options.filename)) {
        abort('Error: test FAILED !!!');
      } else {
        console.log('Success');
      }
    } else if (options.path) {
      // @todo fs.readdir()
    }
  }
  , function(err) {
    abort(err);
  }
);
