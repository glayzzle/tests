#!/usr/bin/env node

/**
 * Glayzzle : PHP on NodeJS
 * @url http://glayzzle.com
 * @author Ioan CHIRIAC
 * @license BSD-3-Clause
 */

var GLAYZZLE_PATH = '../../src';
var util = require('util');
var fs = require('fs');
var path = require('path');
var PHP = require(GLAYZZLE_PATH + '/php');
function printVersion() {
  util.puts('Glayzzle version ' + PHP.VERSION);
}

function printHelp() {
  util.puts('Usage: test [options] [-f] <file>');
  util.puts('');
  util.puts('  --build                        Rebuilds the parser and overwrite it');
  util.puts('  --lexer                        Rebuilds only the lexer');
  util.puts('  --debug [0-9]+                 Enables debug ouput (with a specific level)');
  util.puts('  --ast                          Parse and test the AST of specified files');
  util.puts('  -f <file>                      Parse and test the specified file');
  util.puts('  -d <path>                      Parse each file in the specified path');
  util.puts('  -r                             Use recursivity with the specified path');
  util.puts('  -v, --version                  Print version information and exit');
  util.puts('  -h, --help                     Print help and exit');
}


// aborts the execution with the specified error message
function abort(message) {
  util.error(message);
  process.exit(1);
}

/* Arguments */
var options = {
  build: false,
  lexer: false,
  ast: false,
  debug: 0,
  filename: null,
  path: null,
  recursive: false
};
var args = process.argv.slice(2); // Trim 'node' and the script path.

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

// Reading arguments
while (args.length > 0 && isOption(args[0])) {
  switch(args[0]) {
    case '-f':
      nextArg();
      options.filename = args[0];
      break;

    case '--build':
      options.build = true;
      break;

    case '--lexer':
      options.lexer = true;
      break;

    case '--ast':
      options.ast = true;
      break;

    case '--debug':
      nextArg();
      options.debug = args[0];
      break;

    case '-d':
      nextArg();
      options.path = args[0];
      break;

    case '-r':
      options.recusive = true;
      break;

    case '-v':
    case '--version':
      printVersion();
      process.exit(0);
      break;

    case '-h':
    case '--help':
      printHelp();
      process.exit(0);
      break;

    default:
      abort('Unknown option: ' + args[0] + '.');
  }
  nextArg();
}

// REBUILDS THE PARSER
if (options.build || options.lexer) {

  // helper for reading a list of files
  var readParserFiles = function(files) {
    var buffer = '';
    for(var i = 0; i < files.length; i++) {
      util.puts('Reading ' + GLAYZZLE_PATH + '/grammar/' + files[i]);
      buffer += fs.readFileSync(GLAYZZLE_PATH + '/grammar/' + files[i], "utf8");
    }
    
    // reading imports
    var importRegex = /^@import\s+'([A-Za-z0-9\-_\.\\\/]*)'$/mg;
    var files = [];
    match = importRegex.exec(buffer);
    while (match != null) {
      files.push(match[1]);
      match = importRegex.exec(buffer);
    }
    var imports = {};
    if (files && files.length > 0) {
      for(var i = 0; i < files.length; i++) {
        util.puts('Imports ' + files[i]);
        imports[files[i]] = fs.readFileSync(
          GLAYZZLE_PATH + '/grammar/' + files[i]
        );
      }
    } else {
      files = [];
    }
    return buffer.replace(
      importRegex,
      function(match, file) {
        return imports[file];
      }
    );
  };

  util.puts('** BUILDING MODE **');
  util.puts('');

  var lexer = null;
  var jison = require('jison');
  var files = require(GLAYZZLE_PATH + '/grammar/build.js');

  // building the parser
  if (!options.lexer) {
    // reading parser files
    lexer = readParserFiles(files['lexer']);
    var buffer =
      "%lex\n" + lexer + "/lex\n\n" +
      readParserFiles(files['parser'])
    ;
    // generating the parser
    util.puts('');
    util.puts('...Parsing the grammar');

    var parser = new jison.Parser(buffer);
    util.puts('...Building ' + GLAYZZLE_PATH + '/parser.js');
    
    // inject the lexer file
    parser.lexer.generateModule = function() {
      return 'try { var lexer = require(\'./lexer.js\'); } catch(e) { } \n';
    };
    fs.writeFileSync(
      GLAYZZLE_PATH + '/parser.js',
      parser.generate()
    );
    
    util.puts('');
    util.puts('DONE - the parser was rebuilt !');
    util.puts('');
  }


  // --- START TO UPDATE THE TOKENS DEFINITION FILES :
  var parser = require(GLAYZZLE_PATH + '/parser.js').parser;

  // add default symbols
  parser.symbols_['T_OPEN_TAG']             = 9901;
  parser.symbols_['T_OPEN_TAG_WITH_ECHO']   = 9902;
  parser.symbols_['T_CLOSE_TAG']            = 9903;
  parser.symbols_['T_WHITESPACE']           = 9904;
  parser.symbols_['T_COMMENT']              = 9905;
  parser.symbols_['T_DOC_COMMENT']          = 9906;

  // update the tokenizer
  var tokens = {};
  var tokVars = [];
  var tokProps = [];
  for(var tokenId in parser.symbols_) {
    var token = parser.symbols_[tokenId];
    if (tokenId.substring(0, 2) == 'T_') {
      tokens[token] = tokenId;
      tokVars.push('\n\t' + tokenId + ' = ' + token);
      tokProps.push('\n\t' + tokenId + ': ' + token);
    }
  }
  fs.writeFileSync(
    GLAYZZLE_PATH + '/grammar/tokens.js',
    'module.exports = ' + JSON.stringify(tokens) + ';'
  );
  fs.writeFileSync(
    GLAYZZLE_PATH + '/grammar/lexer/tokens.js',
    'var ' + tokVars.join(',') + ';'
  );
  fs.writeFileSync(
    GLAYZZLE_PATH + '/tokens.js',
    'module.exports = { ' + tokProps.join(',') + '};'
  );

  // Refresh the lexer contents with new tokens
  util.puts('');
  util.puts('...Parsing the lexer');
  lexer = readParserFiles(files['lexer']);

  // Parsing the lexer file
  var Lexer       = require('jison-lex');
  var LexerParser = require('lex-parser');
  var lexerGrammar = LexerParser.parse(lexer);
  if (!lexerGrammar.options) lexerGrammar.options = {};  
  lexerGrammar.options.moduleName = 'lexer'; // used exported variable
  lexerGrammar.options.moduleType = 'js';
  
  // Generating the lexer
  util.puts('...Building ' + GLAYZZLE_PATH + '/lexer.js');
  fs.writeFileSync(
    GLAYZZLE_PATH + '/lexer.js',
    'var conf = require(\'./php\').context.conf;\n'
    + fs.readFileSync(GLAYZZLE_PATH + '/grammar/lexer/tokens.js') + '\n'
    + fs.readFileSync(GLAYZZLE_PATH + '/grammar/lexer/header.js') + '\n'
    + Lexer.generate(lexerGrammar) 
    + '\n\n' + fs.readFileSync(GLAYZZLE_PATH + '/grammar/lexer/footer.js') 
  );

  util.puts('');
  util.puts('DONE - the lexer was rebuilt !');
  util.puts('');

    /* test the parser
    var builder = require(GLAYZZLE_PATH + '/builder');
    var AST = builder.getParser().parse('<?php $john = "John"; echo "Hello World $john !";');
    console.log(AST); */

  process.exit(0);
}


// Checking last parameters
if ( args.length > 0 ) {
  if ( args.length == 1 && !options.filename ) {
    options.filename = args[0];
  } else {
    abort('Too many arguments.');
  }
}

if ( !options.filename && !options.path ) {
  abort('Expecting a filename or a path.');
}

process.env.DEBUG = options.debug;

// Load tests handlers
var engines = [
    require('./formats/parser')
  , require('./formats/phpt')
  , require('./formats/token')
  , require('./formats/php')
  , require('./formats/ast')
];

// gets the extension of the specified filename
function getExtension(filename) {
    var i = filename.lastIndexOf('.');
    return (i < 0) ? '' : filename.substr(i);
}

// run a test over the specified file
function test(filename) {
  console.log(' + ' + filename);
  try {
    if (options.ast) {
      return engines[4].run(
            filename
          , PHP
      );
    }
    var extension = getExtension(filename);
    for(var i = 0; i<engines.length; i++) {
      if (engines[i].handles(filename, extension)) {
        if (engines[i].explode) {
          return engines[i].run(
            fs.readFileSync(filename).toString().split('\r\n')
            , filename
            , PHP
          );
        } else {
          return engines[i].run(filename, PHP);
        }
      }
    }
    console.info('\n(i) IGNORED : unrecognized extension "'+getExtension(filename)+'" for ' + filename);
    return false;
  } catch(e) {
    util.error( (e.stack || e) + '\n' );
    throw e;
    return false;
  }
}

// run tests
console.log('\n*** START TESTING ***\n');
if (options.filename) {
  if (!test(options.filename)) {
    abort('Error: test FAILED !!!');
  } else {
    console.log('Success');
  }
} else if (options.path) {
  var testFiles = function(path) {
    fs.readdir(path, function(err, files) {
      if (err) throw err;
      for(var i = 0; i < files.length; i ++) {
        var file = files[i];
        if (file[0] != '.') {
          var stat = fs.statSync(path + file);
          if (!stat.isDirectory()) {
            test(path + file);
          } else if (options.recusive) {
            testFiles(path + file + '/');
          }
        }
      }
    });
  };
  testFiles(options.path);
}
